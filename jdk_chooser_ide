#! /bin/bash

# @(#)jdk_chooser.bash	1.22 10/07/26
# Copyright (c) 2006, 2010, Oracle and/or its affiliates. All rights reserved.
# @(#)RELEASE VERSION Sun Studio IDE 9.0 Linux_i386 2010/08/13

export JDK_HOME

javaversion=""
GREP=/bin/grep
CUT=/bin/cut
SED=/bin/sed
GETTEXT=/usr/bin/gettext

#
# Find a valid JDK
#
jdk_chooser()
{
    # Validate jdkhome form --jdkhome and exit if not good.
    if [ "$jdkhome" != "" ]; then
	jdk_verifier
	if [ "$jdkhome" = "" ]; then
	    NotFound
	fi
    fi
    # Look for a valid Java installation
    if [ "$jdkhome" = "" ]; then
        # try the user's path
        # This is a trick, to ignore any output from .cshrc:
        # we run 'which' with two arguments and take the last line.
        javaloc=`/usr/bin/which java java 2>&1 | ${SED} -n '$p'`
        if [ -f "$javaloc" ]; then
            javaloc1=`/usr/bin/dirname $javaloc`
            jdkhome=`/usr/bin/dirname $javaloc1`
            java_how="PATH"
	    jdk_verifier
        fi
    fi
    if [ "$jdkhome" = "" ]; then
        if [ -f "/usr/jdk/latest/bin/java" ]; then
	    jdkhome=/usr/jdk/latest
	    java_how="/usr/jdk/latest"
	    jdk_verifier
        fi
    fi
    if [ "$jdkhome" = "" ]; then
        if [ -f "/usr/java/bin/java" ]; then
	    jdkhome=/usr/java
	    java_how="/usr/java"
	    jdk_verifier
        fi
    fi
    if [ "$jdkhome" = "" ]; then
        if [ -f "/usr/bin/java" ]; then
	    jdkhome=/usr
	    java_how="/usr"
	    jdk_verifier
        fi
    fi
    if [ "$jdkhome" = "" ]; then
	NotFound	
    fi
    Debugmessage "jdkhome: ${jdkhome} ${java_how}"
}

GetJavaVersion()
{
    javaversion=`${jdkhome}/bin/java -version 2>&1 | ${GREP} 'java version' | ${CUT} -f2 -d'"'`
    Debugmessage "Javaversion: \"${javaversion}\" "
    javasversion=`echo "${javaversion}" | ${SED} s/_/./ `
    Debugmessage "Javaversion: \"${javaversion}\" "
}

jdk_verifier()
{
    # If we don't have a java or if not JDK, exit with error message
    if [ -z "$jdkhome" -o ! -x "$jdkhome/bin/java" ]
    then
        jdkhome=""
    fi
    # If we have a java to run, check the java version
    if [ "${jdkhome}" != "" ] ; then
    
        # Get the version of java being used
        GetJavaVersion
        Debugmessage "Found version \"${javaversion}\" from ${jdkhome}"
    
        # Check J2SE version
        if [ "${javaversion}" = "" ] ; then
	   jdkhome=""
        else
    	majorno="`echo ${javasversion} | ${CUT} -f1 -d'.' `"
    	minorno="`echo ${javasversion} | ${CUT} -f2 -d'.' `"
    	microno="`echo ${javasversion} | ${SED} 's/-/./' | ${CUT} -f3 -d'.' `"
    	patchno="`echo ${javasversion} | ${SED} 's/-/./' | ${CUT} -f4 -d'.' `"
        if [ -z "$microno" ]; then microno=0 ; fi
        if [ -z "$patchno" ]; then patchno=0 ; fi
    	Debugmessage "Found that java major version is ${majorno}"
    	Debugmessage "Found that java minor version is ${minorno}"
    	Debugmessage "Found that java micro version is ${microno}"
    	Debugmessage "Found that java patch version is ${patchno}"
    
    	if [ ${majorno} -ne 1 ]; then
	    Debugmessage "Found JVM x majorno != 1"
    	    jdkhome=""
	elif [ ${minorno} -lt 6 ] ; then
	    Debugmessage "Found JVM 1.x minorno < 6"
    	    jdkhome=""
    	elif [ ${minorno} -eq 6 ] ; then
    	    Debugmessage "Found java minorno = 6"
    	    if [ ${patchno} -lt 13 ] ; then
    		Debugmessage "Found JVM 1.6, patchno < 13"
    		jdkhome=""
    	    fi
    	fi
        fi
    fi
}

NotFound()
{
    fmt=$(${GETTEXT} -e $"\
Solaris Studio is unable to find a supported version of Java.
Solaris Studio supports Java version 1.6.0_13 and newer and looks for a valid Java installation in the following order:
1) Location specified with --jdkhome command line option
2) In PATH environment variable
3) At /usr/jdk/latest location, if exists
4) At /usr/java location, if exists
5) At /usr location, if exists
")
    printf "$fmt\n" $jdkhome
    exit 1
}

Debugmessage()
{
    if [ "${SPRODEBUGMESSAGE}" != "" ] ; then
	echo "DEBUG: $1"
    fi
}

jdk_chooser

JDK_HOME=$jdkhome
